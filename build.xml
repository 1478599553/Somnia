<project name="Somnia" default="gradle_dist" basedir=".">
    <description>
        Somnia + forge gradle build file
    </description>

  <!-- 
  
  Set global properties for this build 
  
  properties "forge" and "build_number" must be supplied at the command line
  
  -->
  <property name="core_mod_class" value="com.kingrunes.somnia.asm.SFMLLoadingPlugin" />
  <property name="version_class" value="com.kingrunes.somnia.SomniaVersion" />
  
  <property name="src" location="src" />
  <property name="dist"  location="dist" />
  <property name="forge_src"  location="${forge}/src/main/java" />
  <property name="forge_dist"  location="${forge}/build/libs" />
 
  <target name="init">
  
	<!-- OS detection -->
	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>
  
	<!-- Copy source from eclipse project to Forge gradle staging area -->
    <copy todir="${forge_src}">
		<fileset dir="${src}" />
	</copy>
	<script language="javascript"><![CDATA[
		var versionClass = project.getProperty("version_class");
		
		var regexPattern = java.util.regex.Pattern.compile("([A-Z]*_[A-Z]*) = ([0-9]*)");
        var versionFile = new java.io.File(project.getProperty("forge_src")+"/"+versionClass.replace(".", "/")+".java");
		var fileReader = new java.io.BufferedReader(new java.io.FileReader(versionFile));
		var lines = new java.util.ArrayList();
		var str;
		var matcher;
		
		while ((str=fileReader.readLine()) != null)
		{
			matcher = regexPattern.matcher(str);
			if (matcher.find())
				project.setProperty(matcher.group(1).toLowerCase(), matcher.group(2));
			
			lines.add(str);
		}
		
		fileReader.close();
		
		var fileWriter = new java.io.PrintWriter(versionFile);
		
		var patched = false;
		for (i=0; i<lines.size(); i++)
		{
			str = lines.get(i);
			if (!patched && str.startsWith("\tpublic static final int BUILD ="))
			{
				str = "\tpublic static final int BUILD = " + project.getProperty("build_number") + ";";
				patched = true;
			}
			fileWriter.println(str);
		}
		
		fileWriter.flush();
		fileWriter.close();
		
    ]]></script>
  </target>

  <target name="gradle_build_win" depends="init" if="isWindows" description="build with gradle">
	<!-- Run gradle's build task -->
    <exec dir="${forge}" executable="cmd">
		<arg value="/c" />
		<arg value="gradlew" />
		<arg value="build" />
	</exec>
  </target>
  
  <target name="gradle_build_unix" depends="init" if="isUnix" description="build with gradle">
	<!-- Run gradle's build task -->
    <exec dir="${forge}" executable="${forge}/gradlew">
		<arg value="build" />
	</exec>
  </target>
  
  <target name="gradle_dist" depends="gradle_build_win, gradle_build_unix" description="create distributable">
	<delete file="${dist}/${ant.project.name}-${major_version}.${minor_version}.${revision_version}.${build_number}.jar" />
	<jar destfile="${dist}/${ant.project.name}-${major_version}.${minor_version}.${revision_version}.${build_number}.jar" basedir="${basedir}" includes="mcmod.info">
		<zipfileset src="${forge_dist}/modid-1.0.jar" excludes="mcmod.info" />
		<manifest>
			<attribute name="FMLCorePlugin" value="${core_mod_class}" />
			<attribute name="FMLCorePluginContainsFMLMod" value="true" />
		</manifest>
	</jar>
  </target>

  <target name="clean" description="clean up">
	<delete includeemptydirs="true">
		<fileset dir="${forge_src}" includes="**/*"/>
	</delete>
  </target>
</project>